{"version":3,"sources":["components/Search.js","App.js","registerServiceWorker.js","index.js"],"names":["users","name","email","Search","props","state","searchString","data","loaded","handleChange","bind","this","setState","fetch","then","response","json","records","refs","search","focus","value","trim","toLowerCase","length","filter","record","first_name","last_name","match","type","ref","onChange","placeholder","map","l","city","zip","phone","React","Component","App","exact","path","component","displayName","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a0a5a64a.chunk.js","sourcesContent":["// JavaScript source code\r\nimport React from 'react';\r\nlet users = [\r\n    {\r\n        name: \"Leonard Rogers\",\r\n        email: \"egestas@justonecante.org\"\r\n    },\r\n    {\r\n        name: \"Walker Pace\",\r\n        email: \"erat.eget.tincidunt@idsapienCras.org\"\r\n    },\r\n    {\r\n        name: \"Lance Mcintyre\",\r\n        email: \"Nam.ligula@quamvel.net\"\r\n    },\r\n    {\r\n        name: \"Rudyard Conway\",\r\n        email: \"sit@nunc.org\"\r\n    },\r\n    {\r\n        name: \"Chadwick Oneal\",\r\n        email: \"laoreet@dictum.edu\"\r\n    },\r\n    {\r\n        name: \"Isaiah Kent\",\r\n        email: \"diam.dictum@lobortisquam.co.uk\"\r\n    },\r\n    {\r\n        name: \"Griffith Perkins\",\r\n        email: \"congue@acfermentumvel.ca\"\r\n    },\r\n    {\r\n        name: \"Lawrence Wheeler\",\r\n        email: \"ac.libero@Duisac.org\"\r\n    },\r\n    {\r\n        name: \"Preston Walker\",\r\n        email: \"egestas.rhoncus@eudui.co.uk\"\r\n    },\r\n    {\r\n        name: \"Simon Brewer\",\r\n        email: \"nunc.sed@Fuscediamnunc.co.uk\"\r\n    }\r\n];\r\n\r\nexport class Search extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchString: \"\",\r\n            data: null,\r\n            loaded: false\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    \r\n\r\n    async componentDidMount() {\r\n        this.setState({\r\n            users: users\r\n        });\r\n\r\n        await fetch('api/getAll')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({ records: data, loaded: true }));\r\n\r\n        this.refs.search.focus();\r\n    }\r\n\r\n    handleChange() {\r\n        this.setState({\r\n            searchString: this.refs.search.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var { searchString, records, loaded } = this.state;\r\n        if (!loaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            let search = this.state.searchString.trim().toLowerCase();\r\n\r\n            if (search.length > 0) {\r\n                records = records.filter(function (record) {\r\n                    var name = record.first_name.toLowerCase() + record.last_name.toLowerCase();\r\n                    return name.match(search);\r\n                });\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <h3>React - simple search</h3>\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={this.state.searchString}\r\n                            ref=\"search\"\r\n                            onChange={this.handleChange}\r\n                            placeholder=\"type name here\"\r\n                        />\r\n                    </div>\r\n                    <ul>\r\n                        {records.map(l => {\r\n                            return (\r\n                                <li>\r\n                                    {l.first_name} {l.last_name} {l.email} {l.city} {l.state} {l.zip} {l.phone}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Search } from './components/Search';\r\n\r\nimport './custom.css'\r\n\r\nexport default class App extends Component {\r\n    static displayName = App.name;\r\n\r\n  render () {\r\n      return (\r\n          <Route exact path='/' component={Search} />\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}